<?php
/*
 |------------------------------------------------------------------
 | linger.iliubang.cn
 |------------------------------------------------------------------
 | @author    : liubang
 | @date      : 2016/3/29 14:01
 | @copyright : (c) iliubang.cn
 | @license   : MIT (http://opensource.org/licenses/MIT)
 |------------------------------------------------------------------
 */

namespace linger\driver\view;

class LingerCompiler
{
        /**
         * @var LingerView
         */
        private $view = NULL;

        /**
         * @var string
         */
        private $content = '';

        /**
         * @var array
         */
        private $literal = [];

        /**
         * \brief start compiler
         *
         * @param \linger\driver\view\LingerViewAbstract $view
         *
         * @throws \Exception
         */
        public function run($view)
        {
                $this->view = $view;
                $this->content = \file_get_contents($this->view->getTmpFile());
                $this->getNoParseContent();
                $this->parseTags();
                $this->parseVars();
                $this->parseFunc();
                $this->replaceNoParseContent();
                $this->content = "<?php if(!defined('LINGER')){header('HTTP/1.1 403 Forbidden');die();}?>"
                        . "<!-- this file is generated by Linger! " . \date('Y/m/d H:i:s') . " @author: liubang <it.liubang@qq.com> -->\n"
                        . $this->content;
                if (\is_writable(\dirname($this->view->getCompileFile()))) {
                        \file_put_contents($this->view->getCompileFile(), $this->content);
                        \chmod($this->view->getCompileFile(), 0777);
                } else {
                        throw new \Exception('directory ' . \dirname($this->view->getCompileFile()) . ' is unwritable!');
                }
        }

        /**
         * \brief gets the contents that dose'nt require parsing, and is stored in an array.
         */
        private function getNoParseContent()
        {
                $preg = '#<literal>(.*?)</literal>#isU';
                $status = \preg_match_all($preg, $this->content, $info, PREG_SET_ORDER);
                if ($status) {
                        foreach ($info as $key => $val) {
                                if (!empty($val)) {
                                        $this->literal[$key] = $val[1];
                                        $this->content = \str_replace($val[0], '###' . $key . '###', $this->content);
                                }
                        }
                }
        }

        /**
         * \brief revert the contents without parsing.
         */
        private function replaceNoParseContent()
        {
                foreach ($this->literal as $k => $content) {
                        $this->content = \str_replace('###' . $k . '###', $content, $this->content);
                }
        }

        /**
         * \brief parse all custom tags.
         */
        private function parseTags()
        {
                $tagObj = new LingerTag();
                $tags = $tagObj->getTags();
                foreach ($tags as $tag => $opt) {
                        if (!isset($opt['block']) || !isset($opt['level'])) {
                                continue;
                        }
                        for ($i = 0; $i <= $opt['level']; $i++) {
                                if (!$tagObj->parseTag($tag, $this->content)) {
                                        break;
                                }
                        }
                }
        }

        /**
         * \brief parse variations.
         *      e.g. {$a}, {$a.b}, {$a|date=y-m-d,###}
         */
        private function parseVars()
        {
                $preg = '/\{\$([a-zA-Z\.\_\[\]\'\"]+)?(?:\|(.*))?\}/isU';
                //0. 全部 1. 变量名 2. 函数名=参数
                $status = \preg_match_all($preg, $this->content, $info, PREG_SET_ORDER);
                if ($status) {
                        foreach ($info as $value) {
                                $var = '$';
                                if (!empty($value[1])) {
                                        $data = \explode('.', $value[1]);
                                        foreach ($data as $n => $m) {
                                                if ($n == 0) {
                                                        $var .= $m;
                                                } else {
                                                        $var .= '[\'' . $m . '\']';
                                                }
                                        }
                                }
                                if (!empty($value[2])) {
                                        $funcAlias = \C('TMPL_ALIASES_FUNC');
                                        $funcs = \explode('|', $value[2]);
                                        foreach ($funcs as $func) {
                                                $tmp = \explode('=', $func);
                                                $function = \trim($tmp[0]);
                                                if (\array_key_exists($function, $funcAlias)) {
                                                        $function = $funcAlias[$function];
                                                }
                                                $args = isset($tmp[1]) ? $tmp[1] : '';
                                                if (\strstr($args, '###')) {
                                                        $args = \str_replace('###', $var, $args);
                                                } else {
                                                        $args = $var . ',' . $args;
                                                }
                                                $args = \trim($args, ',');
                                                $var = $function . '(' . $args . ')';
                                        }
                                }
                                if (!empty($var)) {
                                        $replace = "<?php echo $var;?>";
                                        $this->content = \str_replace($value[0], $replace, $this->content);
                                }
                        }
                }
        }

        /**
         * \brief parse all functions.
         */
        private function parseFunc()
        {
                $preg = '/\{\:(.*)\}/isU';
                $status = \preg_match_all($preg, $this->content, $info, PREG_SET_ORDER);
                if ($status) {
                        foreach ($info as $v) {
                                if (!empty($v[1])) {
                                        $replace = "<?php echo {$v[1]}; ?>";
                                        $this->content = \str_replace($v[0], $replace, $this->content);
                                }
                        }
                }
        }
}
